# #@ load("@ytt:data", "data")
---
apiVersion: learningcenter.tanzu.vmware.com/v1beta1
kind: Workshop
metadata:
  name: tap-overview-multi-tenant
spec:
  title: TAP Overview Multi-Tenant
  description: An introduction to the Tanzu Application Platform for Application Developers
  vendor: vmware.com
  difficulty: beginner
  duration: 100m
  url: https://github.com/Eknathreddy09/tap-multi-user
  content:
    image: tanzupartnerworkshop.azurecr.io/tapworkshop:v2
    files: github.com/Eknathreddy09/tap-multi-user?ref=main
    # image: #@ "harbor.{}/tanzu-e2e/inner-tap-workshop:latest".format(data.values.ingress.domain)
    # files: #@ "github.com/{}/tap-workshop?ref={}".format(data.values.git.account,data.values.git.branch)
  session:
    resources:
      memory: 3Gi
    env:
      # - name: GITEA_PASSWORD
      #   value: #@ data.values.gitea.adminPassword
      - name: VIEW_CLUSTER_DOMAIN
        value: workshop.tap.captainvirtualization.in
      - name: TAP_REGISTRY_HOST
        value: tanzupartnerworkshop.azurecr.io
      - name: ACC_SERVER_URL
        value: https://accelerator.workshop.tap.captainvirtualization.in
      # - name: HARBOR_USER
      #   value: #@ data.values.harbor.user
      # - name: HARBOR_PASSWORD
      #   value: #@ data.values.harbor.adminPassword
    namespaces:
      budget: custom
    applications:
      terminal:
        enabled: true
        layout: split
      console:
        enabled: true
        vendor: octant
      editor:
        enabled: true
      registry:
        enabled: false
    objects:
      - apiVersion: v1
        kind: LimitRange
        metadata:
          name: resource-limits
        spec:
          limits:
            - type: PersistentVolumeClaim
              max:
                storage: 10Gi

      # Permissions for workshop

      - apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: $(session_namespace)-cluster-admin
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: cluster-admin
        subjects:
          - kind: ServiceAccount
            namespace: $(workshop_namespace)
            name: $(service_account)
      # - apiVersion: rbac.authorization.k8s.io/v1
      #   kind: ClusterRoleBinding
      #   metadata:
      #     name: $(session_namespace)-default-sa-cluster-admin
      #   roleRef:
      #     apiGroup: rbac.authorization.k8s.io
      #     kind: ClusterRole
      #     name: cluster-admin
      #   subjects:
      #     - kind: ServiceAccount
      #       namespace: $(session_namespace)
      #       name: default #$(service_account)
      # - apiVersion: v1
      #   kind: Secret
      #   metadata:
      #     name: tap-registry
      #     namespace: $(session_namespace)
      #     annotations:
      #       secretgen.carvel.dev/image-pull-secret: ""
      #   type: kubernetes.io/dockerconfigjson
      #   data:
      #     .dockerconfigjson: e30K
      # - apiVersion: v1
      #   kind: ServiceAccount
      #   metadata:
      #     name: default
      #     namespace: $(session_namespace)
      #   secrets:
      #     - name: registry-credentials
      #   imagePullSecrets:
      #     - name: registry-credentials
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: default-permit-deliverable
          namespace: $(session_namespace)
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: deliverable
        subjects:
          - kind: ServiceAccount
            name: default
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: default-permit-workload
          namespace: $(session_namespace)
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: workload
        subjects:
          - kind: ServiceAccount
            name: default
      - apiVersion: tekton.dev/v1beta1
        kind: Pipeline
        metadata:
          labels:
            apps.tanzu.vmware.com/pipeline: test
          name: developer-defined-tekton-pipeline
          namespace: $(session_namespace)
        spec:
          params:
            - name: source-url
              type: string
            - name: source-revision
              type: string
          tasks:
            - name: test
              params:
                - name: source-url
                  value: $(params.source-url)
                - name: source-revision
                  value: $(params.source-revision)
              taskSpec:
                metadata: {}
                params:
                  - name: source-url
                    type: string
                  - name: source-revision
                    type: string
                spec: null
                steps:
                  - image: gradle
                    name: test
                    resources: {}
                    script: |-
                      cd `mktemp -d`
                      wget -qO- $(params.source-url) | tar xvz -m
                      ./mvnw test
      # - apiVersion: scanning.apps.tanzu.vmware.com/v1beta1
      #   kind: ScanPolicy
      #   metadata:
      #     name: scan-policy
      #     namespace: $(session_namespace)
      #   spec:
      #     regoFile: |
      #       package main

      #       # Accepted Values: "Critical", "High", "Medium", "Low", "Negligible", "UnknownSeverity"
      #       notAllowedSeverities := ["Critical","High","UnknownSeverity"]
      #       ignoreCves := []

      #       contains(array, elem) = true {
      #         array[_] = elem
      #       } else = false { true }

      #       isSafe(match) {
      #         severities := { e | e := match.ratings.rating.severity } | { e | e := match.ratings.rating[_].severity }
      #         some i
      #         fails := contains(notAllowedSeverities, severities[i])
      #         not fails
      #       }

      #       isSafe(match) {
      #         ignore := contains(ignoreCves, match.id)
      #         ignore
      #       }

      #       deny[msg] {
      #         comps := { e | e := input.bom.components.component } | { e | e := input.bom.components.component[_] }
      #         some i
      #         comp := comps[i]
      #         vulns := { e | e := comp.vulnerabilities.vulnerability } | { e | e := comp.vulnerabilities.vulnerability[_] }
      #         some j
      #         vuln := vulns[j]
      #         ratings := { e | e := vuln.ratings.rating.severity } | { e | e := vuln.ratings.rating[_].severity }
      #         not isSafe(vuln)
      #         msg = sprintf("CVE %s %s %s", [comp.name, vuln.id, ratings])
      #       }
